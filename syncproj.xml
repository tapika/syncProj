<?xml version="1.0"?>
<doc>
    <assembly>
        <name>syncproj</name>
    </assembly>
    <members>
        <member name="T:CsScript">
            <summary>
            class for executing c# script.
            </summary>
        </member>
        <member name="M:CsScript.RunScript(System.String,System.Boolean,System.Boolean,System.String@,System.String[])">
            <summary>
            Compiles .cs script into dll/pdb, loads as assembly, and executes Main function.
            Temporary dll/pdb gets deleted. If .cs throws exception - it will be converted to
            error information, including .cs filename and source code line information.
            </summary>
            <param name="_path">Path to script which to execute</param>
            <param name="bAllowThrow">true if allow to throw exceptions</param>
            <param name="errors">Errors if any</param>
            <param name="args">Main argument parameters</param>
            <param name="bCompileOnly">true if only to compile</param>
            <returns>true if execution was successful.</returns>
        </member>
        <member name="M:CsScript.getCsFileInfo(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Scans through C# script and gets additional information about C# script itself, 
            like dependent .cs files, and so on.
            </summary>
            <param name="csPath">C# script to load and scan</param>
            <param name="bUseAbsolutePaths">true if to use absolute paths, false if not</param>
            <param name="exceptFiles">Don't include path'es specified in here</param>
            <returns>C# script info</returns>
        </member>
        <member name="T:CsScriptInfo">
            <summary>
            Additional info about c# script.
            </summary>
        </member>
        <member name="F:CsScriptInfo.csFiles">
            <summary>
            Referred .cs files to include into compilation
            </summary>
        </member>
        <member name="F:CsScriptInfo.refFiles">
            <summary>
            Referred .dll's and assembly names, which must be included as reference assemblies when compiling.
            </summary>
        </member>
        <member name="F:CsScriptInfo.bCsDebug">
            <summary>
            Just additional //css_debug for compile troubleshooting in this code
            </summary>
        </member>
        <member name="M:CsScriptInfo.DebugEnabled">
            <summary>
            checks if debug enabled.
            </summary>
            <returns>true - enabled</returns>
        </member>
        <member name="F:CsScriptInfo.g_bCsDebug">
            <summary>
            Global flag to enable C# script compilation debugging
            </summary>
        </member>
        <member name="M:UnitSuiteInfo.GetSuites">
            <summary>
            Gets list of supported suites (classes with test methods)
            </summary>
        </member>
        <member name="M:UnitSuiteInfo.GetUnitTests">
            <summary>
            Queries list of specific unit tests in specific suite (test methods in one class)
            </summary>
            <returns></returns>
        </member>
        <member name="F:UnitTestInfo.sourceCodePath">
            <summary>
            Source code location, full path
            </summary>
        </member>
        <member name="F:UnitTestInfo.line">
            <summary>
            Source code line number
            </summary>
        </member>
        <member name="F:UnitTestInfo.ignored">
            <summary>
            True if test will not be executed ([Ignore] attribute on), false - executed
            </summary>
        </member>
        <member name="F:UnitTestInfo.ExceptionType">
            <summary>
            Exception type which method is allowed to throw, null if exceptions are not allowed
            </summary>
        </member>
        <member name="M:UnitTestInfo.InvokeTest(System.Boolean,TestResults)">
            <summary>
            This method is must throw exception if test fails.
            </summary>
            <param name="isLastMethod">true if given method is last invoked, and api must clean up / release test class resources</param>
            <exception cref="T:System.OperationCanceledException">Can be thrown to cancel ongoing tests</exception>
        </member>
        <member name="T:StringExtensions">
            <summary>
            String helpers.
            </summary>
        </member>
        <member name="M:StringExtensions.CompareTo(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings, set ignoreCase to true to ignore case comparison ('A' == 'a')
            </summary>
        </member>
        <member name="T:Project">
            <summary>
            Represents Visual studio project .xml model
            </summary>
        </member>
        <member name="F:Project.solution">
            <summary>
            Solution where project is included from. null if project loaded as standalone.
            </summary>
        </member>
        <member name="F:Project.bIsFolder">
            <summary>
            true if it's folder (in solution), false if it's project. (default)
            </summary>
        </member>
        <member name="F:Project.bIsPackagingProject">
            <summary>
            true if it's Android Ant or Gradle packaging project (Set separately from Keyword, because might be parsed out from solution file)
            </summary>
        </member>
        <member name="F:Project.bDefinedAsExternal">
            <summary>
            Don't generate project if defined as externalproject
            </summary>
        </member>
        <member name="P:Project.ProjectHostGuid">
            <summary>
            Made as a property so can be set over reflection.
            </summary>
        </member>
        <member name="F:Project.fileFormatVersion">
            <summary>
            Visual studio file format version, e.g. 2010, 2012, ...
            </summary>
        </member>
        <member name="M:Project.SetFileFormatVersion(System.Int32)">
            <summary>
            Sets project file format version
            </summary>
            <param name="ver">Visual studio version number</param>
        </member>
        <member name="F:Project.ToolsVersion">
            <summary>
            "4.0" for vs2010/vs2012, "12.0" for vs2013, "14.0" for vs2015
            </summary>
        </member>
        <member name="M:Project.setToolsVersion(System.String)">
            <summary>
            Sets tools version, also tried to detect file format version
            </summary>
            <param name="ver"></param>
        </member>
        <member name="F:Project.gradlePackage">
            <summary>
            Only if Keyword == GradlePackage
            </summary>
        </member>
        <member name="M:Project.getOs">
            <summary>
            Gets target OS based on keyword, null if default. (windows or don't care)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Project.WindowsTargetPlatformVersion">
            <summary>
            Target Platform Version, e.g. "8.1" or "10.0.14393.0"
            </summary>
        </member>
        <member name="F:Project.TargetFrameworkVersion">
            <summary>
            .NET Target Framework Version, for example "v4.7.2"
            </summary>
        </member>
        <member name="F:Project.ProjectName">
            <summary>
            Project name and it's relative path in form: "subdir\\name"
            </summary>
        </member>
        <member name="F:Project.RelativePath">
            <summary>
            Sub-folder and filename of project to save. language defines project file extension
            </summary>
        </member>
        <member name="F:Project.language">
            <summary>
            if null - RelativePath includes file extension, if non-null - "C++" or "C#" - defines project file extension.
            </summary>
        </member>
        <member name="M:Project.getLanguage">
            <summary>
            Gets programming language of project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Project.getRelativePath">
            <summary>
            gets relative path based on programming language
            </summary>
            <returns></returns>
        </member>
        <member name="M:Project.getProjectExtension">
            <summary>
            Gets project extension.
            </summary>
            <returns>Project extension</returns>
        </member>
        <member name="M:Project.getProjectFolder">
            <summary>
            Gets folder where project will be saved in.
            </summary>
        </member>
        <member name="M:Project.getFullPath">
            <summary>
            Gets project full path
            </summary>
            <returns>Project full path</returns>
        </member>
        <member name="M:Project.IsSubFolder">
            <summary>
            Returns true if this is not a project, but solution folder instead.
            </summary>
            <returns>false - project, true - folder in solution</returns>
        </member>
        <member name="F:Project.slnConfigurations">
            <summary>
            Same amount of configurations as in solution, this however lists project configurations, which correspond to solution configuration
            using same index.
            </summary>
        </member>
        <member name="F:Project.configurations">
            <summary>
            List of supported configuration|platform permutations, like "Debug|Win32", "Debug|x64" and so on.
            </summary>
        </member>
        <member name="M:Project.updateFileConfigurations(FileInfo)">
            <summary>
            Updates file configuration array from project configurations
            </summary>
            <param name="fi">File to which to add configurations</param>
        </member>
        <member name="M:Project.getConfigurationNames">
            <summary>
            Gets list of supported configurations like 'Debug' / 'Release'
            </summary>
        </member>
        <member name="M:Project.getPlatforms">
            <summary>
            Gets list of supported platforms like 'Win32' / 'x64'
            </summary>
        </member>
        <member name="F:Project.slnBuildProject">
            <summary>
            true or false whether to build project or not.
            </summary>
        </member>
        <member name="F:Project.slnDeployProject">
            <summary>
            true to deploy project, false - not, null - invalid. List is null if not used at all.
            </summary>
        </member>
        <member name="F:Project.CLRSupport">
            <summary>
            Enable clr support
            </summary>
        </member>
        <member name="F:Project.ProjectGuid">
            <summary>
            Project guid, for example "{65787061-7400-0000-0000-000000000000}"
            </summary>
        </member>
        <member name="P:Project.ProjectGuidShort">
            <summary>
            Without "{}"
            </summary>
        </member>
        <member name="F:Project.projectConfig">
            <summary>
            per configuration list
            </summary>
        </member>
        <member name="P:Project.ProjectDependencies">
            <summary>
            Project dependent guids. Set to null if not used.
            </summary>
        </member>
        <member name="F:Project.files">
            <summary>
            This array includes all items from ItemGroup, independently whether it's include file or file to compile, because
            visual studio is ordering them alphabetically - we keep same array to be able to sort files.
            </summary>
        </member>
        <member name="M:Project.getConfiguration(System.Xml.Linq.XElement)">
            <summary>
            Extracts configuration name in readable form.
            Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" => "Debug|x64"
            </summary>
            <returns>null if Condition node does not exists, configuration name otherwise</returns>
        </member>
        <member name="M:Project.ExtractCompileOptions(System.Xml.Linq.XElement,FileInfo,System.String)">
            <summary>
            Extracts compilation options for single cpp/cs file.
            </summary>
            <param name="clCompile">xml node from where to get</param>
            <param name="file2compile">compiler options to fill out</param>
            <param name="subField">Into which field to enter if non null</param>
        </member>
        <member name="M:Project.ElementValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets xml node by name.
            </summary>
            <param name="node">Xml node from where to get</param>
            <param name="field">Xml tag to query</param>
            <returns>object if xml node value if any, null if not defined</returns>
        </member>
        <member name="M:Project.CopyField(System.Object,System.String,System.Xml.Linq.XElement)">
            <summary>
            Copies field by "field" - name, from node.
            </summary>
            <returns>false if fails (value does not exists)</returns>
        </member>
        <member name="M:Project.copyNodeToObject(System.Reflection.FieldInfo,System.Xml.Linq.XElement,System.Object)">
            <summary>
            Copies data from node to object o, using field info fi.
            </summary>
        </member>
        <member name="M:Project.getProjectGuid(System.String)">
            <summary>
            Gets projects guid from file.
            </summary>
            <param name="path">path from where to load project</param>
            <returns>Project guid</returns>
        </member>
        <member name="M:Project.LoadProject(Solution,System.String,Project,System.Int32)">
            <summary>
            Loads project. If project exists in solution, it's loaded in same instance.
            </summary>
            <param name="solution">Solution if any exists, null if not available.</param>
            <param name="path">path from where to load project</param>
            <param name="project">instance into which to load, null if create new</param>
            <param name="loadLevel">1 if interested only in guid</param>
        </member>
        <member name="M:Project.DumpConfiguration(FileConfigurationInfo,System.String,Configuration)">
            <summary>
            Dumps file or project specific configuration.
            </summary>
            <param name="conf">Configuration to dump</param>
            <param name="confName">Configuration name, null if project wise</param>
            <param name="projectConf">If null, then conf is project wide configuration, if non-null - project configuration of file specific configuration</param>
        </member>
        <member name="M:Project.getSortedConfigurations(System.Collections.Generic.List{System.String},System.Boolean,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Resorts configuration list in some particular order.
            </summary>
            <param name="configurations">Configuration to sort</param>
            <param name="bX3264hasPriority">x86 / x64 platforms have priority.</param>
            <param name="b64HasPriority">64 bit configurations have priority. null if not use this sort criteria.</param>
            <param name="bCompareConfigNameFirst">true if compare config name first</param>
            <returns></returns>
        </member>
        <member name="M:Project.XmlEscape(System.String)">
            <summary>
            Escapes xml special characters. http://weblogs.sqlteam.com/mladenp/archive/2008/10/21/Different-ways-how-to-escape-an-XML-string-in-C.aspx
            </summary>
        </member>
        <member name="M:Project.SaveProject(UpdateInfo)">
            <summary>
            Saves project if necessary.
            </summary>
        </member>
        <member name="M:Project.UpdateFile(System.String,System.String,UpdateInfo,System.Boolean)">
            <summary>
            Save file contents if file were updated.
            </summary>
            <param name="path">Path to save</param>
            <param name="newFileContents">new file contents to save</param>
            <param name="force">true if force to save file</param>
            <returns>true if file was updated.</returns>
        </member>
        <member name="M:Project.IsPathProjectOrSolutionRooted(System.String)">
            <summary>
            Checks if path is rooted against SolutionDir or ProjectDir
            </summary>
            <param name="path">path. By default same as project directory.</param>
            <returns>true if rooted.</returns>
        </member>
        <member name="M:Project.optimize_symbols_recheck(FileConfigurationInfo)">
            <summary>
            optimize and symbols reflect to debug format chosen.
            </summary>
            <param name="fconf"></param>
        </member>
        <member name="M:Project.Clone">
            <summary>
            Clones project
            </summary>
        </member>
        <member name="T:FunctionNameAttribute">
            <summary>
            Custom class for mapping enumeration values to premake configuration tag.
            </summary>
        </member>
        <member name="F:FunctionNameAttribute.tag">
            <summary>
            function name itself.
            </summary>
        </member>
        <member name="M:FunctionNameAttribute.#ctor(System.String)">
            <summary>
            function name attribute
            </summary>
        </member>
        <member name="T:EPrecompiledHeaderUse">
            <summary>
            Specifies whether or not to use precompiled headers
            </summary>
        </member>
        <member name="F:EPrecompiledHeaderUse.Create">
            <summary>
            Create precompiled headers
            </summary>
        </member>
        <member name="F:EPrecompiledHeaderUse.Use">
            <summary>
            Use precompiled headers
            </summary>
        </member>
        <member name="F:EPrecompiledHeaderUse.NotUsing">
            <summary>
            Default value (not initialized)
            </summary>
        </member>
        <member name="F:EPrecompiledHeaderUse.ProjectDefault">
            <summary>
            Not available in project file, but this is something we indicate that we haven't set value for precompiled headers.
            </summary>
        </member>
        <member name="T:EExceptionHandling">
            <summary>
            Exception Handling Model
            </summary>
        </member>
        <member name="F:EExceptionHandling.Async">
            <summary>
            The exception-handling model that catches both asynchronous (structured) and synchronous (C++) exceptions. (/EHa)
            </summary>
        </member>
        <member name="F:EExceptionHandling.SyncCThrow">
            <summary>
            Both C++ and C functions can throw exceptions (/EHs)
            </summary>
        </member>
        <member name="F:EExceptionHandling.Sync">
            <summary>
            C++ functions can throw exceptions, C functions don't throw exceptions (/EHsc)
            </summary>
        </member>
        <member name="F:EExceptionHandling.NoExceptionHandling">
            <summary>
            Functions assumed not to throw exceptions (/EH-)
            </summary>
        </member>
        <member name="F:EExceptionHandling.Enabled">
            <summary>
            Functions assumed not to throw exceptions (-fexceptions)
            </summary>
        </member>
        <member name="F:EExceptionHandling.Disabled">
            <summary>
            Functions assumed not to throw exceptions (-fno-exceptions)
            </summary>
        </member>
        <member name="F:EExceptionHandling.UnwindTables">
            <summary>
            -funwind-tables
            </summary>
        </member>
        <member name="F:EExceptionHandling.ProjectDefault">
            <summary>
            Default value, not saved in .vcxproj project file
            </summary>
        </member>
        <member name="T:EBasicRuntimeChecks">
            <summary>
            Run-Time Error Checks
            </summary>
        </member>
        <member name="F:EBasicRuntimeChecks.StackFrameRuntimeCheck">
            <summary>
            Stack Frames, /RTCs - Enables stack frame run-time error checking.
            </summary>
        </member>
        <member name="F:EBasicRuntimeChecks.UninitializedLocalUsageCheck">
            <summary>
            Uninitialized Variables, /RTCu - Reports when a variable is used without having been initialized.
            </summary>
        </member>
        <member name="F:EBasicRuntimeChecks.EnableFastChecks">
            <summary>
            Both, /RTC1 - Equivalent of StackFrameRuntimeCheck + UninitializedLocalUsageCheck.
            </summary>
        </member>
        <member name="F:EBasicRuntimeChecks.Default">
            <summary>
            No Run-time checks.
            </summary>
        </member>
        <member name="F:EBasicRuntimeChecks.ProjectDefault">
            <summary>
            Not present in .vcxproj, sets to project default value
            </summary>
        </member>
        <member name="T:EWarningLevel">
            <summary>
            Specifies the level of warning to be generated by the compiler.
            </summary>
        </member>
        <member name="F:EWarningLevel.TurnOffAllWarnings">
            <summary>
            Level 0 disables all warnings.
            </summary>
        </member>
        <member name="F:EWarningLevel.Level1">
            <summary>
            Level 1 displays severe warnings. Level 1 is the default setting.
            </summary>
        </member>
        <member name="F:EWarningLevel.Level2">
            <summary>
            Level 2 displays all level 1 warnings and warnings that are less severe than level 1.
            </summary>
        </member>
        <member name="F:EWarningLevel.Level3">
            <summary>
            Level 3 displays all level 2 warnings and all other warnings that are recommended for production purposes.
            </summary>
        </member>
        <member name="F:EWarningLevel.Level4">
            <summary>
            Level 4 displays all level 3 warnings and informational warnings. We recommend that you use this option only to provide lint-like warnings. 
            However, for a new project, it may be best to use /W4 in all compilations; this will ensure the fewest possible hard-to-find code defects.
            </summary>
        </member>
        <member name="F:EWarningLevel.EnableAllWarnings">
            <summary>
            Displays all /W4 warnings and any other warnings that are not included in /W4—for example, warnings that are off by default.
            </summary>
        </member>
        <member name="T:IncludeType">
            <summary>
            Defines what needs to be done with given item. Not all project types support all enumerations - for example
            packaging projects / C# projects does not support CustomBuild.
            
            Order of IncludeType must be the same as appear in .vcxproj (first comes first)
            </summary>
        </member>
        <member name="F:IncludeType.Reference">
            <summary>
            C# references to .net assemblies
            </summary>
        </member>
        <member name="F:IncludeType.ClInclude">
            <summary>
            Header file (.h)
            </summary>
        </member>
        <member name="F:IncludeType.ClCompile">
            <summary>
            Source codes (.cpp) files
            </summary>
        </member>
        <member name="F:IncludeType.ResourceCompile">
            <summary>
            .rc / resource files.
            </summary>
        </member>
        <member name="F:IncludeType.CustomBuild">
            <summary>
            Any custom file with custom build step
            </summary>
        </member>
        <member name="F:IncludeType.None">
            <summary>
            .def / .bat
            </summary>
        </member>
        <member name="F:IncludeType.Image">
            <summary>
            .ico files.
            </summary>
        </member>
        <member name="F:IncludeType.Text">
            <summary>
            .txt files.
            </summary>
        </member>
        <member name="F:IncludeType.ProjectReference">
            <summary>
            For Android package project: Reference to another project, which needs to be included into package.
            </summary>
        </member>
        <member name="F:IncludeType.Invalid">
            <summary>
            Intentionally not valid value, so can be replaced with correct one. (Visual studio does not supports one)
            </summary>
        </member>
        <member name="F:IncludeType.Compile">
            <summary>
            C# - source codes to compile
            </summary>
        </member>
        <member name="F:IncludeType.GradleTemplate">
            <summary>
            Android / Gradle project, *.template files.
            </summary>
        </member>
        <member name="F:IncludeType.JavaCompile">
            <summary>
            .java - source codes to compile
            </summary>
        </member>
        <member name="F:IncludeType.Natvis">
            <summary>
            Native Visualization file.
            </summary>
        </member>
        <member name="T:EDebugInformationFormat">
            <summary>
            Defines debug information format.
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.EditAndContinue">
            <summary>
            Applicable for windows projects only. /ZI compiler flag.
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.None">
            <summary>
            Applicable for windows and android projects
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.OldStyle">
            <summary>
            Applicable for windows projects only
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.ProgramDatabase">
            <summary>
            Applicable for windows projects only. /Zi compiler flag.
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.LineNumber">
            <summary>
            Applicable for android projects only.
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.FullDebug">
            <summary>
            Applicable for android projects only.
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.Invalid">
            <summary>
            Just some value, just to indicate that enumeration value is invalid.
            </summary>
        </member>
        <member name="T:ECLanguageStandard">
            <summary>
            C Language standard
            </summary>
        </member>
        <member name="T:ECppLanguageStandard">
            <summary>
            C++ Language standard
            </summary>
        </member>
        <member name="T:FileConfigurationInfo">
            <summary>
            Configuration class which configures project as well as individual file entries.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.confName">
            <summary>
            For debugging purposes - specifies configuration name (Debug|Win32) with which given configuration is accosiated with.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.PrecompiledHeader">
            <summary>
            Precompile header - use or create.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ExcludedFromBuild">
            <summary>
            When set to true - disabled from build.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.PreprocessorDefinitions">
            <summary>
            Defines, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalUsingDirectories">
            <summary>
            Additional #using Directories, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalIncludeDirectories">
            <summary>
            Additional Include Directories, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.DisableSpecificWarnings">
            <summary>
            List of warning to disable, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ExceptionHandling">
            <summary>
            Exception Handling Model
            </summary>
        </member>
        <member name="M:FileConfigurationInfo.getExceptionHandlingValue(EKeyword)">
            <summary>
            Gets xml tag for .vcxproj
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.BasicRuntimeChecks">
            <summary>
            Run-Time Error Checks
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ShowIncludes">
            <summary>
            In windows projects only: Set to true if includes needs to be shown. Used for debug purposes, not loaded by script as configuration parameter.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalDependencies">
            <summary>
            obj / lib files, ';' separated list.
            On windows platform can include also libraries, on android 'LibraryDependencies' specifies library files.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.LibraryDependencies">
            <summary>
            Android specific: Additional libraries to link
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalLibraryDirectories">
            <summary>
            Additional directory from where to search obj / lib files, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ObjectFileName">
            <summary>
            Output filename (.obj file)
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.PrecompiledHeaderFile">
            <summary>
            Precompiled header file
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.CompileAs">
            <summary>
            Android specific.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.Optimization">
            <summary>
            Optimization level. (MaxSpeed is default value for each project configuration, for each file configuration - it's ProjectDefault)
            </summary>
        </member>
        <member name="M:FileConfigurationInfo.getOptimization(Project)">
            <summary>
            Gets optimization level, set for specific project type.
            </summary>
            <param name="p">Project for which to query</param>
        </member>
        <member name="F:FileConfigurationInfo.RuntimeLibrary">
            <summary>
            Run-time library
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.FunctionLevelLinking">
            <summary>
            Allows the compiler to package individual functions in the form of packaged functions (COMDATs).
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.MinimalRebuild">
            <summary>
            Enables minimal rebuild, which determines whether C++ source files that include changed C++ class definitions (stored in header (.h) files) need to be recompiled.
            (/Gm option)
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.IntrinsicFunctions">
            <summary>
            Replaces some function calls with intrinsic or otherwise special forms of the function that help your application run faster.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.EnableCOMDATFolding">
            <summary>
            Some sort of linker optimization flag: COMDAT folding
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.OptimizeReferences">
            <summary>
            Eliminates functions and data that are never referenced
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.Profile">
            <summary>
            Set to true to enable profiling (/PROFILE linker flag)
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.DebugInformationFormat">
            <summary>
            Format of debug information.
            </summary>
        </member>
        <member name="M:FileConfigurationInfo.getDebugInformationFormatDefault(System.String)">
            <summary>
            Gets visual studio default format for specific configuration.
            </summary>
            <param name="confName">configuration name (E.g. Debug|Win32) for which to query, null if use this configuration</param>
            <returns>Default value</returns>
        </member>
        <member name="F:FileConfigurationInfo.MultiProcessorCompilation">
            <summary>
             Build with Multiple Processes -
                Windows: "/MP" - can be specified on file level, not sure why
                Android: "UseMultiToolTask" - only on project level
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.customBuildRule">
            <summary>
            Custom build step for includeType.CustomBuild specification. Can be null if not defined.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ClCompile_AdditionalOptions">
            <summary>
            Additional compiler options
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.Link_AdditionalOptions">
            <summary>
            Additional linker options
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.RuntimeTypeInfo">
            <summary>
            Android: Enable run-time type information
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.CLanguageStandard">
            <summary>
            Android: C Language Standard
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.CppLanguageStandard">
            <summary>
            Android: C++ Language Standard
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.TreatWarningAsError">
            <summary>
            Threat warning as error.
            </summary>
        </member>
        <member name="T:FileInfo">
            <summary>
            Information about that particular file.
            </summary>
        </member>
        <member name="F:FileInfo.includeType">
            <summary>
            Include type, same as specified in .vcxproj / .androidproj.
            </summary>
        </member>
        <member name="F:FileInfo.relativePath">
            <summary>
            Relative path to file (from project path perspective)
            </summary>
        </member>
        <member name="F:FileInfo.Project">
            <summary>
            When includeType == ProjectReference - specifies referenced project guid. Includes guid brackets - '{'/'}'
            </summary>
        </member>
        <member name="F:FileInfo.HintPath">
            <summary>
            C# - location of .dll assembly
            </summary>
        </member>
        <member name="F:FileInfo.Private">
            <summary>
            "Copy Local" = true|false. This option is by default true for local assemblies and false for system assemblies.
            </summary>
        </member>
        <member name="F:FileInfo.CopyLocalSatelliteAssemblies">
            <summary>
            Copy Local Satellite Assemblies
            </summary>
        </member>
        <member name="F:FileInfo.ReferenceOutputAssembly">
            <summary>
            Reference Output Assembly
            </summary>
        </member>
        <member name="M:FileInfo.GetSortTag">
            <summary>
            Will be used to determine how to sort options, reflects to bool copy options above.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FileInfo.GetDefaultValue(System.String)">
            <summary>
            Queries default value for specific field.
            </summary>
            <param name="field">Field name</param>
        </member>
        <member name="M:FileInfo.GetCopyFlagsAsCallParameters">
            <summary>
            Gets Private,CopyLocalSatelliteAssemblies,ReferenceOutputAssembly as call arguments, e.g. "true, false, false"
            </summary>
        </member>
        <member name="F:FileInfo.fileConfig">
            <summary>
            Per configuration specific file configuration. It's acceptable for this list to have 0 entries if no file specific configuration
            is introduced.
            </summary>
        </member>
        <member name="T:CustomBuildRule">
            <summary>
            Custom build tool properties.
            </summary>
        </member>
        <member name="F:CustomBuildRule.Command">
            <summary>
            Visual studio: Command line
            </summary>
        </member>
        <member name="F:CustomBuildRule.Message">
            <summary>
            Visual studio: description. Use empty string to supress message printing.
            </summary>
        </member>
        <member name="F:CustomBuildRule.Outputs">
            <summary>
            Visual studio: outputs
            </summary>
        </member>
        <member name="F:CustomBuildRule.AdditionalInputs">
            <summary>
            Visual studio: additional dependencies
            </summary>
        </member>
        <member name="F:CustomBuildRule.LinkObjects">
            <summary>
            Specify whether the inputs and outputs files with specific extension are passed to linker.
            </summary>
        </member>
        <member name="F:CustomBuildRule.ExcludedFromBuild">
            <summary>
            Probably unused field. Added to satisfy code when loading project.
            </summary>
        </member>
        <member name="M:CustomBuildRule.ToString">
            <summary>
            Gets class instance as one xml string.
            </summary>
        </member>
        <member name="M:CustomBuildRule.FromString(System.String)">
            <summary>
            Decodes class from string
            </summary>
            <param name="inS">xml string to deserialize</param>
            <returns>CustomBuildRule class instance</returns>
        </member>
        <member name="T:EConfigurationType">
            <summary>
            Project type
            </summary>
        </member>
        <member name="F:EConfigurationType.Application">
            <summary>
            .exe
            </summary>
        </member>
        <member name="F:EConfigurationType.DynamicLibrary">
            <summary>
            .dll
            </summary>
        </member>
        <member name="F:EConfigurationType.StaticLibrary">
            <summary>
            .lib or .a
            </summary>
        </member>
        <member name="F:EConfigurationType.Library">
            <summary>
            Android gradle project: Library (.aar/.jar)
            </summary>
        </member>
        <member name="F:EConfigurationType.Utility">
            <summary>
            Utility project
            </summary>
        </member>
        <member name="F:EConfigurationType.ConsoleApplication">
            <summary>
            This value does not physically exists in serialized form in .vcxproj, used only for generation of C# script.
            </summary>
        </member>
        <member name="T:ECharacterSet">
            <summary>
            Character set - unicode MBCS.
            </summary>
        </member>
        <member name="F:ECharacterSet.NotSet">
            <summary>
            Character set is not specified
            </summary>
        </member>
        <member name="F:ECharacterSet.Unicode">
            <summary>
            Unicode
            </summary>
        </member>
        <member name="F:ECharacterSet.MultiByte">
            <summary>
            Ansi
            </summary>
        </member>
        <member name="T:ECLRSupport">
            <summary>
            Clr support
            </summary>
        </member>
        <member name="F:ECLRSupport.None">
            <summary>
            Common Language Runtime Support is not enabled or use same value as parent project is configured.
            </summary>
        </member>
        <member name="F:ECLRSupport.True">
            <summary>
            Common Language Runtime Support (/clr)
            </summary>
        </member>
        <member name="F:ECLRSupport.Pure">
            <summary>
            Pure MSIL Common Language Runtime Support (/clr:pure)
            </summary>
        </member>
        <member name="F:ECLRSupport.Safe">
            <summary>
            Safe MSIL Common Language Runtime Support (/clr:safe)
            </summary>
        </member>
        <member name="T:EWholeProgramOptimization">
            <summary>
            Enables cross-module optimizations by delaying code generation to link-time; requires that linker option 'Link Time Code Generation' be turned on.
            </summary>
        </member>
        <member name="F:EWholeProgramOptimization.NoWholeProgramOptimization">
            <summary>
            Visual studio default.
            </summary>
        </member>
        <member name="F:EWholeProgramOptimization.UseLinkTimeCodeGeneration">
            <summary>
            Yes / /GL compiler option.
            </summary>
        </member>
        <member name="T:ESubSystem">
            <summary>
            Binary image format / target
            </summary>
        </member>
        <member name="F:ESubSystem.NotSet">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:ESubSystem.Windows">
            <summary>
            Windows application
            </summary>
        </member>
        <member name="F:ESubSystem.Console">
            <summary>
            Console application
            </summary>
        </member>
        <member name="T:EOptimization">
            <summary>
            How to optimize code ?
            </summary>
        </member>
        <member name="F:EOptimization.Disabled">
            <summary>
            No optimizations
            </summary>
        </member>
        <member name="F:EOptimization.MinSpace">
            <summary>
            Minimize Size, in Windows projects
            </summary>
        </member>
        <member name="F:EOptimization.MinSize">
            <summary>
            Minimize Size, In Android projects
            </summary>
        </member>
        <member name="F:EOptimization.MaxSpeed">
            <summary>
            Maximize Speed
            </summary>
        </member>
        <member name="F:EOptimization.Full">
            <summary>
            Full Optimization
            </summary>
        </member>
        <member name="F:EOptimization.ProjectDefault">
            <summary>
            Not available in project file, but this is something we indicate that we haven't set value
            </summary>
        </member>
        <member name="T:ERuntimeLibrary">
            <summary>
            Run-time library
            </summary>
        </member>
        <member name="F:ERuntimeLibrary.NotSet">
            <summary>
            Just artificial value to tell that value was not initialized.
            </summary>
        </member>
        <member name="F:ERuntimeLibrary.MultiThreaded">
            <summary>
            Multi-threaded (/MT)
            </summary>
        </member>
        <member name="F:ERuntimeLibrary.MultiThreadedDebug">
            <summary>
            Multi-threaded Debug (/MTd)
            </summary>
        </member>
        <member name="F:ERuntimeLibrary.MultiThreadedDLL">
            <summary>
            Multi-threaded (/MT)
            </summary>
        </member>
        <member name="F:ERuntimeLibrary.MultiThreadedDebugDLL">
            <summary>
            Multi-threaded Debug DLL (/MDd)
            </summary>
        </member>
        <member name="T:EGenerateDebugInformation">
            <summary>
            Generate debug information
            </summary>
        </member>
        <member name="F:EGenerateDebugInformation.No">
            <summary>
            No
            </summary>
        </member>
        <member name="F:EGenerateDebugInformation.OptimizeForDebugging">
            <summary>
            Optimize for debugging
            </summary>
        </member>
        <member name="F:EGenerateDebugInformation.OptimizeForFasterLinking">
            <summary>
            Use fast linking
            </summary>
        </member>
        <member name="F:EGenerateDebugInformation.OptimizeForSharingAndPublishing">
            <summary>
            Generate Debug Information optimized for sharing and publishing (/DEBUG:FULL)
            </summary>
        </member>
        <member name="T:ECompileAs">
            <summary>
            Compile As option.
            </summary>
        </member>
        <member name="F:ECompileAs.Default">
            <summary>
            Compile as 'Default'
            </summary>
        </member>
        <member name="F:ECompileAs.CompileAsCpp">
            <summary>
            Compile as C++ Code (-x c++)
            </summary>
        </member>
        <member name="F:ECompileAs.CompileAsC">
            <summary>
            Compile as C Code (-x c)
            </summary>
        </member>
        <member name="T:EUseOfStl">
            <summary>
            Use of STL library
            </summary>
        </member>
        <member name="F:EUseOfStl.system">
            <summary>
            Minimal C++ runtime library (system)
            </summary>
        </member>
        <member name="F:EUseOfStl.gabi_cpp_static">
            <summary>
            C++ runtime static library (gabi++_static)
            </summary>
        </member>
        <member name="F:EUseOfStl.gabi_cpp_shared">
            <summary>
            C++ runtime shared library (gabi++_shared)
            </summary>
        </member>
        <member name="F:EUseOfStl.stlport_static">
            <summary>
            STLport runtime static library (stlport_static)
            </summary>
        </member>
        <member name="F:EUseOfStl.stlport_shared">
            <summary>
            STLport runtime shared library (stlport_shared)
            </summary>
        </member>
        <member name="F:EUseOfStl.gnustl_static">
            <summary>
            GNU STL static library (gnustl_static)
            </summary>
        </member>
        <member name="F:EUseOfStl.gnustl_shared">
            <summary>
            GNU STL shared library (gnustl_shared)
            </summary>
        </member>
        <member name="F:EUseOfStl.cpp_static">
            <summary>
            LLVM libc++ static library (c++_static)
            </summary>
        </member>
        <member name="F:EUseOfStl.cpp_shared">
            <summary>
            LLVM libc++ shared library (c++_shared)
            </summary>
        </member>
        <member name="T:EThumbMode">
            <summary>
            Arm architecture only
            </summary>
        </member>
        <member name="F:EThumbMode.Disabled">
            <summary>
            Default for ARM64 architecture
            </summary>
        </member>
        <member name="F:EThumbMode.Thumb">
            <summary>
            Default for ARM architecture
            </summary>
        </member>
        <member name="F:EThumbMode.ARM">
            <summary>
            ARM
            </summary>
        </member>
        <member name="F:EThumbMode.NotSpecified">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="T:XmlSerializer2">
            <summary>
            Just a helper class for serializing class instances
            </summary>
        </member>
        <member name="M:XmlSerializer2.ToString(System.Object)">
            <summary>
            Serializes any custom type to string.
            </summary>
            <returns>Serialized xml string</returns>
        </member>
        <member name="M:XmlSerializer2.FromString``1(System.String)">
            <summary>
            Deserializes class instance from string s.
            </summary>
        </member>
        <member name="T:BuildEvent">
            <summary>
            Pre-link / pre-build / post-build item events.
            </summary>
        </member>
        <member name="F:BuildEvent.Command">
            <summary>
            Command to be executed
            </summary>
        </member>
        <member name="F:BuildEvent.Message">
            <summary>
            We don't care about Message currently since it's not used in pre/postbuildcommands
            </summary>
        </member>
        <member name="M:BuildEvent.ToString">
            <summary>
            class instance to string.
            </summary>
        </member>
        <member name="T:Configuration">
            <summary>
            All values set by default are Visual Studio default.
            
            Configuration class includes everything what cannot be configured on individual file level.
            If configuration option can be configured on file level, it should be declared in FileConfigurationInfo.
            </summary>
        </member>
        <member name="F:Configuration.ConfigurationType">
            <summary>
            Project type
            </summary>
        </member>
        <member name="M:Configuration.ConfigurationTypeUpdated">
            <summary>
            Called when ConfigurationType has changed.
            </summary>
        </member>
        <member name="F:Configuration.UseDebugLibraries">
            <summary>
            Mysterious flag, which cannot be set from Visual studio properties, but it affects to some parameter's default values.
            </summary>
        </member>
        <member name="F:Configuration.AndroidAPILevel">
            <summary>
            Android api level, for example "android-22". If null - uses Visual studio default.
            
            </summary>
        </member>
        <member name="F:Configuration.UseOfStl">
            <summary>
            Use of STL
            </summary>
        </member>
        <member name="F:Configuration.ThumbMode">
            <summary>
            ARM or Thumb execution mode
            </summary>
        </member>
        <member name="M:Configuration.getThumbModeDefault(System.String)">
            <summary>
            Gets default for ThumbMode
            </summary>
            <param name="confName">Configuration name</param>
            <returns>Visual studio default for Thumb mode</returns>
        </member>
        <member name="M:Configuration.UseOfStl_getSupportedValues">
            <summary>
            Get list of supported UseOfSTL values
            </summary>
        </member>
        <member name="M:Configuration.getAndroidAPILevelDefault(System.String)">
            <summary>
            Visual studio default depends on cpu architecture - android-19 is default for ARM, android-21 for ARM64.
            </summary>
            <param name="confName"></param>
            <returns>android api level default</returns>
        </member>
        <member name="F:Configuration.PlatformToolset">
            <summary>
            For example:
                null - default
                'Clang_3_8'     - Clang 3.8
                'v141'          - for Visual Studio 2017.
                'v140'          - for Visual Studio 2015.
                'v120'          - for Visual Studio 2013.
            </summary>
        </member>
        <member name="M:Configuration.getPlatformToolsetDefault(Project)">
            <summary>
            Queries default value for PlatformToolset.
            </summary>
            <param name="p">Project against which to query</param>
            <returns>Default value</returns>
        </member>
        <member name="F:Configuration.CharacterSet">
            <summary>
            Specifies project character set
            </summary>
        </member>
        <member name="F:Configuration.CLRSupport">
            <summary>
            Enable clr support
            </summary>
        </member>
        <member name="F:Configuration.UseOfMfc">
            <summary>
            Defines how MFC is linked in
            </summary>
        </member>
        <member name="F:Configuration.WholeProgramOptimization">
            <summary>
            Enables cross-module optimizations by delaying code generation to link-time; requires that linker option 'Link Time Code Generation' be turned on.
            </summary>
        </member>
        <member name="F:Configuration.OutDir">
            <summary>
            Output Directory. 
                Visual studio default:  can be queried using getOutDirDefault()
                premake default:        bin\$(Platform)\$(Configuration)\
            </summary>
        </member>
        <member name="M:Configuration.getOutDirDefault(Project)">
            <summary>
            Gets default value for OutDir field.
            </summary>
            <param name="p">Project against which to query</param>
            <returns>Default value</returns>
        </member>
        <member name="F:Configuration.IntDir">
            <summary>
            Intermediate Directory.
                Visual studio default:  $(Configuration)\
                premake default:        obj\$(Platform)\$(Configuration)\
            </summary>
        </member>
        <member name="M:Configuration.getIntDirDefault(Project)">
            <summary>
            Gets intermediate directory default.
            </summary>
            <param name="p">project</param>
            <returns>Default value of IntDir</returns>
        </member>
        <member name="F:Configuration.TargetName">
            <summary>
            Target Name.
            Visual studio default: $(ProjectName)
            </summary>
        </member>
        <member name="M:Configuration.getTargetNameDefault(Project)">
            <summary>
            Gets default value for TargetName
            </summary>
            <param name="p">Project against which to query</param>
            <returns>Default value</returns>
        </member>
        <member name="F:Configuration.TargetExt">
            <summary>
            Target Extension (.exe, .dll, ...).
            If set to default - must be null.
            </summary>
        </member>
        <member name="M:Configuration.getTargetExtDefault(Project)">
            <summary>
            Gets default value for target ext.
            </summary>
            <param name="p">Project against which to query</param>
            <returns>Default value</returns>
        </member>
        <member name="F:Configuration.IncludePath">
            <summary>
            Include Directories - Semicolon (';') separated list of pathes
            </summary>
        </member>
        <member name="F:Configuration.ExecutablePath">
            <summary>
            Executable Directories - Semicolon (';') separated list of pathes
            </summary>
        </member>
        <member name="F:Configuration.ReferencePath">
            <summary>
            Reference Directories - Semicolon (';') separated list of pathes
            </summary>
        </member>
        <member name="F:Configuration.LibraryPath">
            <summary>
            Library Directories - Semicolon (';') separated list of pathes
            </summary>
        </member>
        <member name="F:Configuration.SourcePath">
            <summary>
            Source Directories - Semicolon (';') separated list of pathes
            </summary>
        </member>
        <member name="F:Configuration.ExcludePath">
            <summary>
            Exclude Directories - Semicolon (';') separated list of pathes
            </summary>
        </member>
        <member name="F:Configuration.SubSystem">
            <summary>
            Typically Windows or Console.
            </summary>
        </member>
        <member name="F:Configuration.GenerateDebugInformation">
            <summary>
            Visual studio defaults: OptimizeForDebugging for release, OptimizeForFasterLinking for debug.
            </summary>
        </member>
        <member name="F:Configuration.AssemblyDebug">
            <summary>
            /ASSEMBLYDEBUG Emits the DebuggableAssembly attribute with debug information tracking and disables JIT optimizations
            </summary>
        </member>
        <member name="F:Configuration.ModuleDefinitionFile">
            <summary>
            .def file location
            </summary>
        </member>
        <member name="F:Configuration.AndroidAppLibName">
            <summary>
            Android specific.
            </summary>
        </member>
        <member name="F:Configuration.PreBuildEventUseInBuild">
            <summary>
            When disabled - pre build event is not used.
            </summary>
        </member>
        <member name="F:Configuration.PreBuildEvent">
            <summary>
            Pre-build event
            </summary>
        </member>
        <member name="F:Configuration.PostBuildEventUseInBuild">
            <summary>
            When disabled - post build event is not used.
            </summary>
        </member>
        <member name="F:Configuration.PostBuildEvent">
            <summary>
            Post-build event
            </summary>
        </member>
        <member name="F:Configuration.PreLinkEventUseInBuild">
            <summary>
            When disabled - pre link build event is not used.
            </summary>
        </member>
        <member name="F:Configuration.PreLinkEvent">
            <summary>
            Prelink-build event
            </summary>
        </member>
        <member name="F:Configuration.ApkFileName">
            <summary>
            gradle package .apk path
            </summary>
        </member>
        <member name="F:Configuration.AdditionalOptions">
            <summary>
            gradle package options.
            </summary>
        </member>
        <member name="T:EKeyword">
            <summary>
            Tags platform
            </summary>
        </member>
        <member name="F:EKeyword.None">
            <summary>
            For sub-folders for example (Also default value). Also for utility projects.
            </summary>
        </member>
        <member name="F:EKeyword.Win32Proj">
            <summary>
            Windows project (32 or 64 bit)
            </summary>
        </member>
        <member name="F:EKeyword.ManagedCProj">
            <summary>
            Same as Win32Proj, for some reason exists as separate value
            </summary>
        </member>
        <member name="F:EKeyword.Android">
            <summary>
            Android project
            </summary>
        </member>
        <member name="F:EKeyword.MFCProj">
            <summary>
            Windows application with MFC support
            </summary>
        </member>
        <member name="F:EKeyword.AntPackage">
            <summary>
            Android packaging project (does not exists on file format level)
            </summary>
        </member>
        <member name="F:EKeyword.GradlePackage">
            <summary>
            Typically set for Android packaging project. (does not exists on file format level)
            </summary>
        </member>
        <member name="F:EKeyword.Linux">
            <summary>
            Linux project
            </summary>
        </member>
        <member name="T:EUseOfMfc">
            <summary>
            Defines how MFC is linked in
            </summary>
        </member>
        <member name="F:EUseOfMfc.None">
            <summary>
            Use Standard Windows Libraries (No MFC)
            </summary>
        </member>
        <member name="F:EUseOfMfc.Static">
            <summary>
            Use MFC in a Static Library
            </summary>
        </member>
        <member name="F:EUseOfMfc.Dynamic">
            <summary>
            Use MFC in a Shared DLL
            </summary>
        </member>
        <member name="F:EUseOfMfc._false">
            <summary>
            Use Standard Windows Libraries (No MFC), can be serialized for Utility project type.
            </summary>
        </member>
        <member name="F:GradlePackage.GradleVersion">
            <summary>
            Gradle version
            </summary>
        </member>
        <member name="F:GradlePackage.ToolName">
            <summary>
            Gradle batch to execute, normally gradlew.bat.
            </summary>
        </member>
        <member name="T:ReflectionEx">
            <summary>
            Reflection helper class.
            </summary>
        </member>
        <member name="M:ReflectionEx.GetFieldsAndProperties(System.Type)">
            <summary>
            Gets fields and properties into one array.
            Order of properties / fields will be preserved in order of appearance in class / struct. (MetadataToken is used for sorting such cases)
            </summary>
            <param name="type">Type from which to get</param>
            <returns>array of fields and properties</returns>
        </member>
        <member name="M:ReflectionEx.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Queries value of field or property.
            </summary>
            <param name="member">member to query from</param>
            <param name="target">target object</param>
            <returns>member value</returns>
        </member>
        <member name="M:ReflectionEx.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets value to target class.
            </summary>
            <param name="member">member</param>
            <param name="target">object</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:ReflectionEx.DeepClone(System.Object)">
            <summary>
            Deep clones specific object.
            Analogue can be found here: https://stackoverflow.com/questions/129389/how-do-you-do-a-deep-copy-an-object-in-net-c-specifically
            This is now improved version (list support added)
            </summary>
            <param name="obj">object to be cloned</param>
            <returns>full copy of object.</returns>
        </member>
        <member name="T:Solution">
            <summary>
            .sln loaded into class.
            </summary>
        </member>
        <member name="F:Solution.name">
            <summary>
            Solution name
            </summary>
        </member>
        <member name="F:Solution.path">
            <summary>
            File path from where solution was loaded.
            </summary>
        </member>
        <member name="F:Solution.solutionRoot">
            <summary>
            Just an internal project for tracking project hierarchy
            </summary>
        </member>
        <member name="M:Solution.ToString">
            <summary>
            Solution name for debugger.
            </summary>
        </member>
        <member name="M:Solution.getSolutionFolder">
            <summary>
            Gets solution path
            </summary>
            <returns></returns>
        </member>
        <member name="F:Solution.fileFormatVersion">
            <summary>
            Visual studio version information used for generation, for example 2010, 2012, 2015 and so on...
            </summary>
        </member>
        <member name="F:Solution.VisualStudioVersion">
            <summary>
            null for old visual studio's
            </summary>
        </member>
        <member name="F:Solution.MinimumVisualStudioVersion">
            <summary>
            null for old visual studio's
            </summary>
        </member>
        <member name="F:Solution.SolutionGuid">
            <summary>
            Solution guid, for example "{00346907-56E9-4CC1-802F-039B70C1FA48}".
            Mandatory starting from Visual studio 2017.
            </summary>
        </member>
        <member name="F:Solution.projects">
            <summary>
            List of project included into solution.
            </summary>
        </member>
        <member name="F:Solution.configurations">
            <summary>
            List of configuration list, in form "{Configuration}|{Platform}", for example "Release|Win32".
            To extract individual platforms / configuration list, use following functions.
            </summary>
        </member>
        <member name="M:Solution.getPlatforms">
            <summary>
            Extracts platfroms supported by solution
            </summary>
        </member>
        <member name="M:Solution.getConfigurations">
            <summary>
            Extracts configuration names supported by solution
            </summary>
        </member>
        <member name="M:Solution.#ctor">
            <summary>
            Creates new solution.
            </summary>
        </member>
        <member name="M:Solution.LoadSolution(System.String)">
            <summary>
            Loads visual studio .sln solution
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in path was not found.</exception>
        </member>
        <member name="M:Solution.SaveSolution(System.String)">
            <summary>
            Saves solution into file.
            </summary>
        </member>
        <member name="M:Solution.SaveSolution(UpdateInfo,System.String)">
            <summary>
            Saves solution into .sln file. Where to save is defined by path.
            </summary>
            <param name="_path">path to .sln, null if use from 'path' variable.</param>
            <param name="uinfo">Update information</param>
        </member>
        <member name="M:Solution.RemoveEmptyFolders(Project)">
            <summary>
            Removes empty folder nodes from solution.
            </summary>
            <param name="p">Must be null on first call</param>
            <returns>true if p was removed, should not be used by caller</returns>
        </member>
        <member name="M:Solution.ChangeProjectDependenciesFromGuidsToNames">
            <summary>
            By default after solution is loaded - all dependent projects are specified by project guids.
            This function will replace project guids with project names.
            </summary>
        </member>
        <member name="M:Solution.EnableProjectBuild(System.Func{Project,System.Nullable{System.Boolean}})">
            <summary>
            Lambda function gets called for each project, return true or false to enable/disable project build, null if don't change
            </summary>
            <param name="func">Callback function, which selects / deselects project for building</param>
        </member>
        <member name="M:Solution.Clone">
            <summary>
            Clone Solution.
            </summary>
            <returns>new solution</returns>
        </member>
        <member name="T:SolutionProjectBuilder">
            <summary>
            Helper class for generating solution or projects.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_solutions">
            <summary>
            List of solutions being generated.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_solution">
            <summary>
            Currently selected active solution on which all function below operates upon. null if not selected yet.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_project">
            <summary>
            Currently selected active project on which all function below operates upon. null if not selected yet.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.solutionUpdateProject">
            <summary>
            project which perform update of solution, all newly added projects must be dependent on it.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_workPath">
            <summary>
            Path where we are building solution / project at. By default same as script is started from.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.setWorkPath(System.String)">
            <summary>
            Sets currently work path (where we are building project / solutions )
            if null is passed as input parameter, sets script's directory as working path.
            </summary>
            <param name="path">Path relative or aboslute, null if relative to calling script</param>
        </member>
        <member name="M:SolutionProjectBuilder.initFromArgs(System.String[])">
            <summary>
            Intialize testing settings from command line arguments.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:SolutionProjectBuilder.m_currentlyExecutingScriptPath">
            <summary>
            Full path from where current execution proceeds (location of .cs script)
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.getExecutingScript(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets directory and/or filename under which script is currently executing. This is either determined from script executed by invokeScript
            or C# initial script location (script which created SolutionProjectBuilder)
            </summary>
            <returns>Empty string if no script is yet executing</returns>
        </member>
        <member name="M:SolutionProjectBuilder.getCsPath(System.String)">
            <summary>
            Gets currently executing C# script directory
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.getCsDir(System.String)">
            <summary>
            Gets currently executing C# script directory
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.getCsFileName(System.String)">
            <summary>
            Gets currently executing C# script filename
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_scriptRelativeDir">
            <summary>
            Relative directory from solution. Set by RunScript.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_solutionRoot">
            <summary>
            If generating only project, this is global root
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.bSaveGeneratedProjects">
            <summary>
            true if to save generated solutions or projects.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.SaveGenerated(System.Boolean)">
            <summary>
            Forces to save generated solution and projects.
            </summary>
        </member>
        <member name="T:SolutionProjectBuilder.Destructor">
            <summary>
            Execute once for each invocation of script. Not executed if multiple scripts are included.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.solution(System.String)">
            <summary>
            Creates new solution.
            </summary>
            <param name="name">Solution name</param>
        </member>
        <member name="M:SolutionProjectBuilder.platforms(System.String[])">
            <summary>
            Specify platform list to be used for your solution or project.
                For example: platforms("x86", "x64");
            </summary>
            <param name="platformList">List of platforms to support</param>
        </member>
        <member name="M:SolutionProjectBuilder.configurations(System.String[])">
            <summary>
            Specify which configurations to support. Typically "Debug" and "Release".
            </summary>
            <param name="configurationList">Configuration list to support</param>
        </member>
        <member name="M:SolutionProjectBuilder.GenerateGuid(System.String)">
            <summary>
            Generates Guid based on String. Key assumption for this algorithm is that name is unique (across where it it's being used)
            and if name byte length is less than 16 - it will be fetched directly into guid, if over 16 bytes - then we compute sha-1
            hash from string and then pass it to guid.
            </summary>
            <param name="name">Unique name which is unique across where this guid will be used.</param>
            <returns>For example "{706C7567-696E-7300-0000-000000000000}" for "plugins"</returns>
        </member>
        <member name="M:SolutionProjectBuilder.externalproject(System.String)">
            <summary>
            Add to solution reference to external project. Call with null parameter to flush currently active project (Either to solution
            or to disk).
            </summary>
            <param name="name">Project name</param>
        </member>
        <member name="M:SolutionProjectBuilder.project(System.String)">
            <summary>
            Adds new project to solution
            </summary>
            <param name="name">Project name</param>
        </member>
        <member name="M:SolutionProjectBuilder.selectDefaultToolset(System.Boolean)">
            <summary>
            Selects default toolset after vsver or kind project definition.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.vsver(System.Int32,System.Boolean)">
            <summary>
            Sets Visual Studio file format version to be used.
            </summary>
            <param name="vsVersion">2010, 2012, 2013, ...</param>
            <param name="force">set to true if besides selecting visual studio project format version, also set default toolset for specific project</param>
        </member>
        <member name="M:SolutionProjectBuilder.VisualStudioVersion(System.String,System.Boolean)">
            <summary>
            Sets visual studio version
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.MinimumVisualStudioVersion(System.String,System.Boolean)">
            <summary>
            Sets minimum visual studio version
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.location(System.String)">
            <summary>
            The location function sets the destination directory for a generated solution or project file.
            </summary>
            <param name="_path"></param>
        </member>
        <member name="M:SolutionProjectBuilder.setLocationFromScriptPath(System.String)">
            <summary>
            Sets project / solution generate location to be the same as script current location
            </summary>
            <param name="subDir">Additional sub-directory if any</param>
        </member>
        <member name="M:SolutionProjectBuilder.uuid(System.String)">
            <summary>
            Specifies project or solution uuid - could be written in form of normal guid ("{5E40B384-095E-452A-839D-E0B62833256F}")
            - use this kind of syntax if you need to produce your project in backwards compatible manner - so existing
            solution can load your project.
            Could be also written in any string form, but you need to take care that string is unique enough accross where your
            project is used. For example project("test1"); uuid("test"); project("test1"); uuid("test"); will result in
            two identical project uuid's and Visual studio will try to resave your project with changed uuid.
            </summary>
            <param name="nameOrUuid">Project uuid or some unique name</param>
        </member>
        <member name="M:SolutionProjectBuilder.language(System.String)">
            <summary>
            Sets project programming language (reflects to used project extension if used for non-file specific configuration)
            </summary>
            <param name="lang">C, C++, C#, if no parameter is specified (null), sets project to autodetect programming language</param>
        </member>
        <member name="M:SolutionProjectBuilder.dependson(System.String[])">
            <summary>
            Specify one or more non-linking project build order dependencies.
            </summary>
            <param name="dependencies">List of dependent projects</param>
        </member>
        <member name="M:SolutionProjectBuilder.referencesProject(System.String[])">
            <summary>
            Specifies reference to another project. As an input you should provide project path, with optional project guid.
            If project guid is not provided, it will be loaded from project itself. (Slight performance penalties)
            </summary>
            <param name="fileGuidList">Project file path + project guid list</param>
        </member>
        <member name="M:SolutionProjectBuilder.references(System.Object[])">
            <summary>
            For C++/cli - adds reference to specific assemblies.
            </summary>
            <param name="assemblyNamesAndParameters">List of assembly names, for example "System" or path to specific assembly. use '?' as first character to
            supress assembly name check. Assemby name can be followed by extra 0-3 booleans to configure assembly copy options.
            Once you use booleans - they are applied to all previously listed assemblies. Make separate calls to distingvish different options.
            
            references("System", "System.Data");
            references("my1.dll", "my2.dll", false);   Copy local will be disabled for both dll's.
            
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.group(System.String)">
            <summary>
            Sets current "directory" where project should be placed.
            </summary>
            <param name="groupPath"></param>
        </member>
        <member name="M:SolutionProjectBuilder.invokeScript(System.String,System.Boolean)">
            <summary>
            Invokes C# Script by source code path. If any error, exception will be thrown.
            </summary>
            <param name="path">c# script path</param>
            <param name="bCompileOnly">true if only to compile</param>
        </member>
        <member name="F:SolutionProjectBuilder.selectedFileConfigurations">
            <summary>
            Selected configurations (Either project global or file specific) selected by filter.
            selectedFileConfigurations is file specific, selectedConfigurations is project wide.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.bLastSetFilterWasFileSpecific">
            <summary>
            true if file specific filtering is active, false if not.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.resetStatics">
            <summary>
            Resets static variables to be able to start next testing round.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.getSelectedConfigurations(System.Boolean,System.Int32)">
            <summary>
            Gets currently selected configurations by filter.
            </summary>
            <param name="bForceNonFileSpecific">true to force project specific configuration set.</param>
            <param name="callerFrame">Tells how many call call frame behind is end-user code. (Non syncproj code). (Reflects to error reporting)</param>
        </member>
        <member name="M:SolutionProjectBuilder.getSelectedProjectConfigurations">
            <summary>
            Gets project configuration list, throw exception if cannot be found
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.filter(System.String[])">
            <summary>
            Selects to which configurations to apply subsequent function calls (like "kind", "symbols", "files"
            and so on...)
            </summary>
            <param name="filters">
                Either configuration name, for example "Debug" / "Release" or
                by platform name, for example: "platforms:Win32", "platforms:x64"
                or by file name, for example: "files:my.cpp"
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.selectConfigurations(FileInfo)">
            <summary>
            Selects file specific configurations
            </summary>
            <param name="fi">File information upon which to select configurations.</param>
        </member>
        <member name="M:SolutionProjectBuilder.removefiles(System.String[])">
            <summary>
            Removes files from project or disables them from particular build configuration (If selected via filter)
            </summary>
            <param name="filesToRemove">List of files to remove / disable</param>
        </member>
        <member name="M:SolutionProjectBuilder.kind(System.String,System.String)">
            <summary>
            Specifies application type, one of following: 
            </summary>
            <param name="_kind">
            "Application"                       - Window application,
            "DynamicLibrary", "SharedLib"       - .dll,
            "StaticLibrary", "StaticLib"        - Static library (.lib or .a),
            "Utility"                           - Utility project,
            "ConsoleApp", "ConsoleApplication"  - Console application.
            </param>
            <param name="os">
            "windows"                           - For Windows OS
            "android"                           - For Android / C++ project
            "antpackage"                        - (Android) Ant package
            "gradlepackage"                     - (Android) Gradle package
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.toolset(System.String,System.Boolean)">
            <summary>
            Selects the compiler, linker, etc. which are used to build a project or configuration.
            </summary>
            <param name="toolset">
            For example:<para />
                'v140' - for Visual Studio 2015.<para />
                'v120' - for Visual Studio 2013.<para />
            </param>
            <param name="force">true - to force set, false - set only if not yet selected.</param>
        </member>
        <member name="M:SolutionProjectBuilder.toolsetCheck">
            <summary>
            Checks that we are specifying correct toolset suitable for given os.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.androidapilevel(System.String)">
            <summary>
            Sets current android api level. Default is "android-19".
            </summary>
            <param name="apilevel">Android api level</param>
        </member>
        <member name="M:SolutionProjectBuilder.useofstl(System.String)">
            <summary>
            Sets specific STL library for Android platform.
            </summary>
            <param name="useofstl"></param>
        </member>
        <member name="M:SolutionProjectBuilder.thumbmode(EThumbMode)">
            <summary>
            Sets Thumb or ARM mode for ARM configuration only.
            </summary>
            <param name="thumbMode">Thumb mode parameter</param>
        </member>
        <member name="M:SolutionProjectBuilder.characterset(System.String)">
            <summary>
            Selects character set.
            </summary>
            <param name="charset">One of following: "Unicode", "Multibyte", "MBCS", "None"</param>
        </member>
        <member name="M:SolutionProjectBuilder.commonLanguageRuntime(ECLRSupport)">
            <summary>
            Enables / disables CLR support
            </summary>
            <param name="clr">clr value</param>
        </member>
        <member name="M:SolutionProjectBuilder.Linker_General_EnableIncrementalLinking(System.Boolean)">
            <summary>
            Enables incremental linking. 
            Enabling incremental linking increases size of produced executable or dll approximately by 50%.
            </summary>
            <param name="b">true - enable, false disable</param>
        </member>
        <member name="M:SolutionProjectBuilder.targetdir(System.String)">
            <summary>
            Specifies output directory.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.objdir(System.String)">
            <summary>
            Specifies intermediate Directory.
            </summary>
            <param name="directory">For example "$(Configuration)\" or "obj\$(Platform)\$(Configuration)\"</param>
        </member>
        <member name="M:SolutionProjectBuilder.targetname(System.String)">
            <summary>
            Specifies target name. (Filename without extension)
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.targetextension(System.String)">
            <summary>
            Specifies target file extension, including comma separator.
            </summary>
            <param name="extension">For example ".dll", ".exe"</param>
        </member>
        <member name="M:SolutionProjectBuilder.pchheader(System.String)">
            <summary>
            Specifies the #include form of the precompiled header file name.
            </summary>
            <param name="file">header file</param>
        </member>
        <member name="M:SolutionProjectBuilder.pchsource(System.String)">
            <summary>
            Specifies the C/C++ source code file which controls the compilation of the header.
            </summary>
            <param name="file">precompiled source code which needs to be compiled</param>
        </member>
        <member name="M:SolutionProjectBuilder.symbols(System.String)">
            <summary>
            Specified whether debug symbols are enabled or not.
            </summary>
            <param name="value">
            "on" - debug symbols are enabled<para />
            "off" - debug symbols are disabled<para />
            "fastlink" - debug symbols are enabled + faster linking enabled.<para />
            "fulldebug" - Generate Debug Information optimized for sharing and publishing<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.AssemblyDebug(System.Boolean)">
            <summary>
            /ASSEMBLYDEBUG Emits the DebuggableAssembly attribute with debug information tracking and disables JIT optimizations
            </summary>
            <param name="b">true to enable, false to disable</param>
        </member>
        <member name="M:SolutionProjectBuilder.includedirs(System.String[])">
            <summary>
            Specifies additional include directories.
            </summary>
            <param name="dirs">List of additional include directories.</param>
        </member>
        <member name="M:SolutionProjectBuilder.usingdirs(System.String[])">
            <summary>
            Specifies additional #using directories.
            </summary>
            <param name="dirs">List of additional #using directories.</param>
        </member>
        <member name="M:SolutionProjectBuilder.disablewarnings(System.String[])">
            <summary>
            Disables specific compilation warnings.
            </summary>
            <param name="warnings">Warnings to disable</param>
        </member>
        <member name="M:SolutionProjectBuilder.sysincludedirs(System.String[])">
            <summary>
            Specifies system include directories.
            </summary>
            <param name="dirs">List of include directories.</param>
        </member>
        <member name="M:SolutionProjectBuilder.syslibdirs(System.String[])">
            <summary>
            Specifies system library directories.
            </summary>
            <param name="dirs">List of include directories.</param>
        </member>
        <member name="M:SolutionProjectBuilder.defines(System.String[])">
            <summary>
            Specifies additional defines.
            </summary>
            <param name="defines">defines, like for example "DEBUG", etc...</param>
        </member>
        <member name="M:SolutionProjectBuilder.matchFiles(System.String,System.String)">
            <summary>
            Matches files from folder _dir using glob file pattern.
            In glob file pattern matching * reflects to any file or folder name, ** refers to any path (including sub-folders).
            ? refers to any character.
            
            There exists also 3-rd party library for performing similar matching - 'Microsoft.Extensions.FileSystemGlobbing'
            but it was dragging a lot of dependencies, I've decided to survive without it.
            </summary>
            <returns>List of files matches your selection</returns>
        </member>
        <member name="M:SolutionProjectBuilder.getCurrentProjectFiles(System.String,System.Boolean)">
            <summary>
            Locates one or more files from current project by file pattern.
            </summary>
            <param name="_filePattern">Either file path or glob file pattern</param>
            <param name="bAllowNoFiles">set to true if don't throw exception if file does not exists (return empty array)</param>
            <returns>List of files matching given pattern</returns>
            <exception cref="T:Exception2">Exception is thrown if no files were matched</exception>
        </member>
        <member name="M:SolutionProjectBuilder.files(System.String[])">
            <summary>
            Adds one or more file into project.
            </summary>
            <param name="filePatterns">File patterns to be added</param>
        </member>
        <member name="M:SolutionProjectBuilder.buildrule(CustomBuildRule)">
            <summary>
            Specifies custom build rule for specific file.
            </summary>
            <param name="cbt">Custom build rule.</param>
        </member>
        <member name="M:SolutionProjectBuilder.postbuildcommands(System.String[])">
            <summary>
            Specifies commands to be executed after project build
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.exportFiles(System.String,System.String[])">
            <summary>
            Perform export of files in post build step
            </summary>
            <param name="toDir">Where to export</param>
            <param name="files">files to export</param>
        </member>
        <member name="M:SolutionProjectBuilder.prebuildcommands(System.String[])">
            <summary>
            Specifies commands to be executed before project build
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.prelinkcommands(System.String[])">
            <summary>
            Specifies commands to be executed before linking phase
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.selfCompileScript(System.String,System.String,System.String,System.String)">
            <summary>
            Sets up custom build rule for project or solution configuration script.
            </summary>
            <param name="script2include">Script to include into project</param>
            <param name="script2compile">Script which shall be compiled once script2include is changed</param>
            <param name="pathToSyncProjExe">Path where syncProj.exe will reside</param>
            <param name="inDir">Where solution or project is located.</param>
        </member>
        <member name="M:SolutionProjectBuilder.projectScript(System.String,System.String,System.String)">
            <summary>
            Configures project rebuild step.
            </summary>
            <param name="script2include">Script to include into project</param>
            <param name="script2compile">Script which shall be compiled once script2include is changed</param>
            <param name="pathToSyncProjExe">Path where syncProj.exe will reside</param>
        </member>
        <member name="M:SolutionProjectBuilder.solutionScript(System.String,System.String,System.String)">
            <summary>
            Configures solution rebuild step.
            </summary>
            <param name="script2include">Script to include into project</param>
            <param name="script2compile">Script which shall be compiled once script2include is changed</param>
            <param name="pathToSyncProjExe">Path where syncProj.exe will reside</param>
        </member>
        <member name="M:SolutionProjectBuilder.configmap(System.String[])">
            <summary>
            Defines configuration mapping from solution (first argument) to project (second argument)
            For example configmap( "Development", "Debug" )
            </summary>
            <param name="confList"></param>
        </member>
        <member name="M:SolutionProjectBuilder.flags(System.String[])">
            <summary>
            Enables certain flags for specific configurations.
            </summary>
            <param name="flags">
            "LinkTimeOptimization" - Enable link-time (i.e. whole program) optimizations.<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.systemversion(System.String,System.Boolean)">
            <summary>
            Sets windows SDK version.
            </summary>
            <param name="ver">Target Platform Version, e.g. "8.1" or "10.0.14393.0"</param>
            <param name="force">true - to force set, false - set only if not yet selected.</param>
        </member>
        <member name="M:SolutionProjectBuilder.TargetFrameworkVersion(System.String)">
            <summary>
            Sets .NET Target Framework Version
            </summary>
            <param name="ver">For example "v4.7.2"</param>
        </member>
        <member name="M:SolutionProjectBuilder.links(System.String[])">
            <summary>
            Adds one or more obj or lib into project to link against.
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:SolutionProjectBuilder.libdirs(System.String[])">
            <summary>
            Adds one or more library directory from where to search .obj / .lib files.
            </summary>
            <param name="folders"></param>
        </member>
        <member name="M:SolutionProjectBuilder.optimize(System.String)">
            <summary>
            Specifies optimization level to be used.
            </summary>
            <param name="optLevel">Optimization level to enable - one of following: off, size, speed, on(or full)</param>
        </member>
        <member name="M:SolutionProjectBuilder.Linker_Optimizations_References(System.Boolean)">
            <summary>
            Eliminates functions and data that are never referenced (/OPT:REF option)
            </summary>
            <param name="bOptimizeReferences">true to enable, false to disable</param>
        </member>
        <member name="M:SolutionProjectBuilder.Linker_Advanced_Profile(System.Boolean)">
            <summary>
            Produces output, which can be used with the Performance Tools profiler.
            </summary>
            <param name="bProfile">true to enable profiling</param>
        </member>
        <member name="M:SolutionProjectBuilder.CCpp_CodeGeneration_EnableFunctionLevelLinking(System.Boolean)">
            <summary>
            Enable function level linking.
            </summary>
            <param name="b">true to enable, false to disable</param>
        </member>
        <member name="M:SolutionProjectBuilder.CCpp_CodeGeneration_RuntimeLibrary(ERuntimeLibrary)">
            <summary>
            Sets specific run-time library.
            
            When same application is being linked with multiple static libraries, application and static libraries
            must all use same runtime library - otherwise you will get link errors.
            </summary>
            <param name="rtl">Run-time library to use</param>
        </member>
        <member name="M:SolutionProjectBuilder.CCpp_CodeGeneration_EnableCppExceptions(EExceptionHandling)">
            <summary>
            Sets exception handling model.
            Disabling exception handling reduces size of produced executable or dll approximately by 20%.
            </summary>
            <param name="eh">Exception level to set</param>
        </member>
        <member name="M:SolutionProjectBuilder.CCpp_CodeGeneration_BasicRuntimeChecks(EBasicRuntimeChecks)">
            <summary>
            Configures basic run-time checks.
            </summary>
            <param name="rtc">Checks to use</param>
        </member>
        <member name="M:SolutionProjectBuilder.Ccpp_Optimization_WholeProgramGeneration(EWholeProgramOptimization)">
            <summary>
            Enables cross-module optimizations by delaying code generation to link-time; requires that linker option 'Link Time Code Generation' be turned on.
            </summary>
            <param name="wpgen"></param>
        </member>
        <member name="M:SolutionProjectBuilder.Ccpp_Optimization_Optimization(EOptimization)">
            <summary>
            Select specific optimization method.
            </summary>
            <param name="opt">Optimization level</param>
        </member>
        <member name="M:SolutionProjectBuilder.buildoptions(System.String[])">
            <summary>
            Passes arguments directly to the compiler command line without translation.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.linkoptions(System.String[])">
            <summary>
            Passes arguments directly to the linker command line without translation.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.objectfilename(System.String)">
            <summary>
            Sets current object filename (output of compilation result).
            Windows: Can be file or directory name.
            Android: Typically: "$(IntDir)%(filename).o"
            </summary>
            <param name="objFilename"></param>
        </member>
        <member name="M:SolutionProjectBuilder.preprocessFile(System.String,System.Boolean,System.String)">
            <summary>
            Advanced feature - forces particular file to preprocess only file (to be compiled).
            This can be used for checking define expansion.
            </summary>
            <param name="file">File to preprocess</param>
            <param name="outExtension">Output file extension</param>
            <param name="bDoPreprocess">true if you want to preprocess file, false if compile normally, but include only preprocessed output</param>
        </member>
        <member name="M:SolutionProjectBuilder.showIncludes(System.String[])">
            <summary>
            Enables show includes only for specific file.
            </summary>
            <param name="fileList">files for which to enable showIncludes.</param>
        </member>
        <member name="M:SolutionProjectBuilder.ConsolePrintException(System.Exception,System.String[])">
            <summary>
            Prints more details about given exception. In visual studio format for errors.
            </summary>
            <param name="ex">Exception occurred.</param>
        </member>
        <member name="M:SolutionProjectBuilder.isDeveloper">
            <summary>
            Returns true if it's developer of syncProj.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.GradleVersion(System.String)">
            <summary>
            Sets gradle version
            </summary>
            <param name="v">version to use</param>
        </member>
        <member name="M:SolutionProjectBuilder.GradleApkFileName(System.String)">
            <summary>
            Sets Gradle Apk File path.
            </summary>
            <param name="apkPath">path</param>
        </member>
        <member name="M:SolutionProjectBuilder.GradleToolName(System.String)">
            <summary>
            Sets Gradle tool name
            </summary>
            <param name="toolName">path</param>
        </member>
        <member name="M:SolutionProjectBuilder.GradleAdditionalOptions(System.String)">
            <summary>
            Sets additional gradle options to be passed to Gradle.
            </summary>
            <param name="additionalOptions">options</param>
        </member>
        <member name="M:SolutionProjectBuilder.GradleProjectDirectory(System.String)">
            <summary>
            Sets Gradle Project Directory. If not specified, uses project directory.
            </summary>
            <param name="path">path</param>
        </member>
        <member name="M:SolutionProjectBuilder.EnableMultiProcessorBuild(System.Boolean)">
            <summary>
            Enables multiprocessor build.
            </summary>
            <param name="bValue">true to enable</param>
        </member>
        <member name="M:SolutionProjectBuilder.RunTimeTypeInformation(System.Boolean)">
            <summary>
            Enables / disables run-time type information
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.CLanguageStandard(ECLanguageStandard)">
            <summary>
            Sets C Language Standard
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.CppLanguageStandard(ECppLanguageStandard)">
            <summary>
            Sets C++ Language Standard
            </summary>
        </member>
        <member name="T:UpdateInfo">
            <summary>
            Info about updated files.
            </summary>
        </member>
        <member name="F:UpdateInfo.lastUpdateInfo">
            <summary>
            Last update information of files which were updated or planned to be updated.
            </summary>
        </member>
        <member name="F:UpdateInfo.bTesting">
            <summary>
            true if testing is in progress
            </summary>
        </member>
        <member name="F:UpdateInfo.filesUpdated">
            <summary>
            Files which were updated.
            </summary>
        </member>
        <member name="F:UpdateInfo.filesUpToDate">
            <summary>
            Files which are up-to-date
            </summary>
        </member>
        <member name="M:UpdateInfo.MarkFileUpdated(System.String,System.Boolean)">
            <summary>
            Adds file which was updated.
            </summary>
            <param name="path">File path to be updated</param>
            <param name="bWasSaved">true if file was saved, false if file is up-to-date</param>
        </member>
        <member name="M:UpdateInfo.DisplaySummary">
            <summary>
            Prints summary about update
            </summary>
        </member>
        <member name="T:SolutionOrProject">
            <summary>
            Let's make system flexible enough that we can load projects and solutions independently of file format.
            </summary>
        </member>
        <member name="M:SolutionOrProject.ConfigationSpecificValue(Project,System.Collections.IList,System.String,Dictionary2{System.String,System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.String)">
            <summary>
            Walks through list of items, locates value using fieldName, identifies how many configuration lines we will need
            and inserts lines into lines2dump.
            </summary>
            <param name="proj">Project which hosts configuration list.</param>
            <param name="list">List to get values from</param>
            <param name="fieldName">Field name to scan </param>
            <param name="lines2dump">Lines which shall be created / updated.</param>
            <param name="valueToLine">value to config line translator function. Function can return null if no lines needs to be provided.</param>
            <param name="forceDefaultValue">If value cannot be configured in style - enabled/disable (one kind of flag only - enable) - specify here default value</param>
        </member>
        <member name="M:SolutionOrProject.getSyncProjExeLocation(System.String,System.String)">
            <summary>
            Tries to determine correct path of syncProj.exe
            </summary>
            <param name="inDir">Folder in which script is located</param>
            <param name="pathToSyncProjExe">Initial proposal where it can be stored</param>
            <returns>Path to syncProj.exe</returns>
        </member>
        <member name="M:SolutionOrProject.UpdateProjectScript(UpdateInfo,System.String,System.Object,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Builds solution or project .lua/.cs scripts
            </summary>
            <param name="uinfo">Information about updates peformed (to print out summary)</param>
            <param name="path">Full path from where project was loaded.</param>
            <param name="solutionOrProject">Solution or project</param>
            <param name="bProcessProjects">true to process sub-project, false not</param>
            <param name="format">lua or cs</param>
            <param name="outFile">Output filename without extension</param>
            <param name="outPrefix">Output prefix (To add before project name)</param>
        </member>
        <member name="M:SolutionOrProject.UpdateConfigurationEntries(Project,System.Collections.Generic.IEnumerable{FileConfigurationInfo},Dictionary2{System.String,System.Collections.Generic.List{System.String}},IncludeType,System.String)">
            <param name="proj">Project</param>
            <param name="config">Either project global configuration entries (Project.projectConfig) or file specified entries (FileInfo.fileConfig)</param>
            <param name="fileName">name of file of which configuration is being parsed.</param>
            <param name="lines2dump">lines to dump</param>
            <param name="includeType">item type to include (Custom build step or compilable source code)</param>
        </member>
        <member name="M:SolutionOrProject.tabbedLine(System.String,System.String)">
            <summary>
            Adds heading (tab) before each line - s is multiline string.
            This code is also detects multiline string start, then heading is not appended.
            </summary>
        </member>
        <member name="M:SolutionOrProject.WriteLinesToDump(System.Text.StringBuilder,Dictionary2{System.String,System.Collections.Generic.List{System.String}},System.Boolean@,System.String)">
            <summary>
            Writes lines to dump into built string.
            </summary>
        </member>
        <member name="T:UsingSyncProj">
            <summary>
            use this class like this:
            
                using ( new UsingSyncProj(1) )
                {
                    files ...
                    filter ...
                    
                }
            </summary>
        </member>
        <member name="M:UsingSyncProj.#ctor(System.Int32)">
            <summary>
            Shifts all callstack frames by N frames.
            </summary>
        </member>
        <member name="M:UsingSyncProj.Dispose">
            <summary>
            Restores call stack frame back.
            </summary>
        </member>
        <member name="T:Exception2">
            <summary>
            Same as Exception, only we save call stack in here (to be able to report error line later on).
            </summary>
        </member>
        <member name="F:Exception2.g_bReportFullPath">
            <summary>
            When testing, this will be set to false.
            </summary>
        </member>
        <member name="M:Exception2.getPath(System.String)">
            <summary>
            returns 'path' if unit test is not active, otherwise picks up only filename without file path.
            </summary>
        </member>
        <member name="F:Exception2.shiftCallerFrame">
            <summary>
            Global variable for those cases when syncProj uses functions meant for end-users (like files, filter, etc...)
            To get excepting address correctly.
            </summary>
        </member>
        <member name="M:Exception2.#ctor(System.String,System.Int32)">
            <summary>
            Creates new exception with stack trace from where exception was thrown.
            </summary>
            <param name="_msg"></param>
            <param name="callerFrame">Frame count which called this function</param>
        </member>
        <member name="M:Exception2.getThrowLocation">
            <summary>
            Tries to determine from which script position exception was thrown. Returns empty line if cannot be detected.
            </summary>
            <returns>Throw source code line</returns>
        </member>
        <member name="P:Exception2.Message">
            <summary>
            Gets exception message
            </summary>
        </member>
        <member name="T:FileSpecificException">
            <summary>
            Exception which references specific file, specific line.
            </summary>
        </member>
        <member name="M:FileSpecificException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            new exception which references specific file / line of source code position
            </summary>
        </member>
        <member name="M:FileSpecificException.getThrowLocation">
            <summary>
            Gets source code location from where error came from
            </summary>
        </member>
        <member name="T:Path2">
            <summary>
            Path helper class.
            </summary>
        </member>
        <member name="M:Path2.GetScriptPath(System.Int32)">
            <summary>
            Gets source code full path of script, executing given function.
            </summary>
            <param name="iFrame">number of frame in stack.</param>
            <returns>Source code path, null if cannot be determined</returns>
        </member>
        <member name="M:Path2.makeRelative(System.String,System.String)">
            <summary>
            Rebases file with path fromPath to folder with baseDir.
            </summary>
            <param name="_fromPath">Full file path (absolute)</param>
            <param name="_baseDir">Full base directory path (absolute)</param>
            <returns>Relative path to file in respect of baseDir</returns>
        </member>
        <member name="T:syncProj">
            <summary>
            syncProj tool.
            </summary>
        </member>
        <member name="M:syncProj.Main(System.String[])">
            <summary>
            Entry point
            </summary>
        </member>
        <member name="T:MakeLogToSolutionBuilder">
            <summary>
            This is rather experimental class, which tries to reverse engineere make log file and construct solution / project 
            out of it - there can be quite many different issues / problems related to make log file parsing - usage
            of 3-rd party executables, etc etc. This class is not main purpose of syncProj, that's why I'm excluding it from code coverage.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:syncProjUnitTestInfo.ExecCmd(System.String,System.String@)" -->
    </members>
</doc>
